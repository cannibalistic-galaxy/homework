import numpy as np
import pandas as pd
import operator
from os import listdir

def CreateDataSet():
    group = np.array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])
    labels = ['A','A','B','B']
    return group,labels

#4个输入参数，用于分类的输入向量是inX,输入的训练样本集为dataSet,标签向量为labels，最后的参数k表示用于选择最近邻居的数目
def classify0(inX,dataSet,labels,k):
    dataSetSize = dataSet.shape[0] #它的功能是读取矩阵的长度，比如shape[0]就是读取矩阵第一维度的长度，返回dataset的行数。
    #(以下3行)距离计算
    diffMat = np.tile(inX,(dataSetSize,1)) - dataSet
    sqDiffMat = diffMat**2 #平方
    sqDistances = sqDiffMat.sum(axis = 1)
    distances = sqDistances**0.5  #开根号
    sortedDistIndicies = distances.argsort()
    classCount = {}
    #（以下2行）选择距离最小的k个点
    for i in range(k):
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1
    #排序
    sortedClassCount = sorted(classCount.items(),key = operator.itemgetter(1),reverse = True)
    return sortedClassCount[0][0]

def file2matrix(filename):
    love_dictionary = {'largeDose':3 , 'smallDoses':2 , 'didntLike':1} #魅力高，魅力低，不喜欢
    fr = open(filename) #打开文件
    arrayOfLines = fr.readlines() #读取文件所有内容
    numberOfLines = len(arrayOfLines) #得到文件行数
    returnMat = np.zeros((numberOfLines,3)) #创建返回的Numpy矩阵，解析完成的数据：numberOfLines行，3列
    classLabelVector = [] #返回的分类标签向量
    index = 0 #行的索引值
    for line in arrayOfLines:
        line = line.strip() #s,strip(rm),当rm空时，默认删除空白符（包括‘\n','\r','\t')
        listFromLine = line.split('\t')#将字符串根据'\t'进行切片
        returnMat[index, :] = listFromLine[0:3]  #提取数据前3列，存放到returnMat的numpy矩阵中，也就是特征矩阵
        """#
        if listFromLine[-1].isdigit(): #Python isdigit() 方法检测字符串是否只由数字组成，如果字符串只包含数字则返回 True 否则返回 False
            classLabelVector.append(int(listFromLine[-1]))
        else:
            classLabelVector.append(love_dictionary.get(listFromLine[-1])) #Python 字典(Dictionary) get() 函数返回指定键的值，如果值不在字典中返回默认值None
        #
        """
        #上面#内内容换成
        if listFromLine[-1] == 'didntLike':
            classLabelVector.append(1)
        elif listFromLine[-1] == 'smallDoses':
            classLabelVector.append(2)
        elif listFromLine[-1] == 'largeDoses':
            classLabelVector.append(3)
       # 好像更好理解一点？
       # """
        index += 1
    return returnMat,classLabelVector
"""
if __name__ == '__main__':
    filename = "datingTestSet.txt" #打开的文件名
    datingDatMat, datingLabels = file2matrix(filename) #打开并处理数据
    print(datingDatMat)
    print(datingLabels)
"""

"""
归一化函数
"""
def autoNorm(dataSet):
    minVals = dataSet.min(0) #获取数据的最小值
    maxVals = dataSet.max(0) #获取数据的最大值
    ranges = maxVals - minVals #范围
    normDataSet = np.zeros(np.shape(dataSet)) #shape(dataSet)函数返回dataSet的矩阵行列数
    m = dataSet.shape[0] #返回dataSet的行数
    normDataSet = dataSet - np.tile(minVals,(m,1)) #原始值减去最小值
    normDataSet = normDataSet / np.tile(ranges,(m,1))  #除以最大和最小值的差，得到归一化数据
    return normDataSet, ranges, minVals

"""
分类器测试函数
"""

def datingClassTest():
    filename = "datingTestSet.txt" #打开的文件名
    datingDatMat, datingLabels = file2matrix(filename) #将返回值的特征矩阵和分类向量分别存储到datingDatMat和datingLabels中
    hoRatio = 0.10 #取所有数据的10%
    normMat, ranges, minVals = autoNorm(datingDatMat) #数据归一化，返回归一化后的矩阵、数据范围、数据最小值
    m = normMat.shape[0] #获得normMat的行数
    numTestVecs = int(m*hoRatio) #10%的测试数据的个数
    errorCount = 0.0 #分类错误计数

    for i in range(numTestVecs): #前numTestVecs个数据作为测试集，后m-numTestVecs个数据作为训练集
        classifierResult = classify0(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 4)
        print("分类结果:%d\t真实类别:%d" % (classifierResult, datingLabels[i]))
        if classifierResult != datingLabels[i]:
            errorCount += 1.0
    print("错误率:%f%%" %(errorCount/float(numTestVecs)*100))

"""
分类输出函数
"""
def classifyPerson():
	resultList = ['讨厌','有些喜欢','非常喜欢'] #输出结果
	precentTats = float(input("玩视频游戏所耗时间百分比:")) #三维特征用户输入
	ffMiles = float(input("每年获得的飞行常客里程数:"))
	iceCream = float(input("每周消费的冰激淋公升数:"))
	filename = "datingTestSet.txt" #打开的文件名
	datingDataMat, datingLabels = file2matrix(filename)#打开并处理数据
	normMat, ranges, minVals = autoNorm(datingDataMat) #训练集归一化
	inArr = np.array([ffMiles, precentTats, iceCream]) #生成NumPy数组,测试集
	norminArr = (inArr - minVals) / ranges #测试集归一化
	classifierResult = classify0(norminArr, normMat, datingLabels, 3) #返回分类结果
	print("你可能%s这个人" % (resultList[classifierResult-1])) 	#打印结果

"""
主函数
"""
if __name__ == '__main__':
    classifyPerson()
